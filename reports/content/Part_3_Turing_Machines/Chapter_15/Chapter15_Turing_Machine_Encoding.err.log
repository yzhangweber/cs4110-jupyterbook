Traceback (most recent call last):
  File "D:\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "D:\Python313\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "D:\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "D:\Python313\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "D:\Python313\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "D:\Python313\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Examples including crash cases
def demonstrate_mathison_examples():
    """Show various examples of TMs and their MATHISON membership"""
    print("\nEXAMPLES OF MATHISON MEMBERSHIP")
    print("=" * 60)
    
    examples = [
        {
            'name': 'Immediate Halt (Right)',
            'encoding': 'abaabbabbb',  # (1,Î”)â†’(2,Î”,R)
            'description': 'Halts immediately on blank, moving right',
            'expected': True
        },
        {
            'name': 'Crash on Left Move',
            'encoding': 'abaabbaaba',  # (1,Î”)â†’(2,Î”,L)
            'description': 'Tries to move left from cell 1 - CRASHES',
            'expected': False
        },
        {
            'name': 'Write Then Halt', 
            'encoding': 'abaabbabbabaababbaba',  # (1,Î”)â†’(1,b,R), (1,b)â†’(2,b,L)
            'description': 'Writes b, moves right, then can safely move left',
            'expected': True
        },
        {
            'name': 'Infinite Right Scan',
            'encoding': 'abaabababb',  # (1,Î”)â†’(1,Î”,R)
            'description': 'Moves right forever on blanks',
            'expected': False
        },
        {
            'name': 'Crash After Multiple Steps',
            'encoding': 'abaabababbabaabaaba',  # (1,Î”)â†’(1,Î”,R), (1,a)â†’(2,a,L)
            'description': 'Moves right on blanks, but would crash if it found "a"',
            'expected': False  # Never finds 'a' on empty tape, so loops forever
        },
        {
            'name': 'Safe Left Move',
            'encoding': 'abaabababbababbaabaabbaabaaba',  # (1,Î”)â†’(1,Î”,R), (1,b)â†’(2,a,L), (1,a)â†’(2,a,L)
            'description': 'Moves right first, then left (but never triggers on empty tape)',
            'expected': False  # Infinite right scan on empty tape
        }
    ]
    
    for ex in examples:
        print(f"\n{ex['name']}: {ex['description']}")
        print(f"Encoding: {ex['encoding']} (length: {len(ex['encoding'])})")
        
        # First check if it's valid CWL
        if mathison_analyzer.cwl_validator.is_valid_cwl(ex['encoding']):
            print("âœ“ Valid CWL encoding")
            
            # Try to decode to show the transition
            try:
                transitions = mathison_analyzer.tm_decoder.decode_complete_machine(ex['encoding'])
                for t in transitions:
                    print(f"  Transition: ({t['from']}, '{t['read']}') â†’ ({t['to']}, '{t['write']}', {t['move']})")
            except:
                print("  (Unable to decode)")
        else:
            print("âœ— Not a valid CWL encoding")
        
        result, reason, steps = mathison_analyzer.is_in_mathison(ex['encoding'], verbose=False)
        print(f"Expected in MATHISON: {ex['expected']}")
        print(f"Actual result: {'IN MATHISON' if result else 'NOT IN MATHISON'} ({reason}, {steps} steps)")
        print("âœ“ Correct" if result == ex['expected'] else "âœ— Incorrect")

demonstrate_mathison_examples()
------------------

----- stdout -----

EXAMPLES OF MATHISON MEMBERSHIP
============================================================

Immediate Halt (Right): Halts immediately on blank, moving right
Encoding: abaabbabbb (length: 10)
------------------

[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[13][39m[32m, line 69[39m
[32m     66[39m         [38;5;28mprint[39m([33mf[39m[33m"[39m[33mActual result: [39m[38;5;132;01m{[39;00m[33m'[39m[33mIN MATHISON[39m[33m'[39m[38;5;250m [39m[38;5;28;01mif[39;00m[38;5;250m [39mresult[38;5;250m [39m[38;5;28;01melse[39;00m[38;5;250m [39m[33m'[39m[33mNOT IN MATHISON[39m[33m'[39m[38;5;132;01m}[39;00m[33m ([39m[38;5;132;01m{[39;00mreason[38;5;132;01m}[39;00m[33m, [39m[38;5;132;01m{[39;00msteps[38;5;132;01m}[39;00m[33m steps)[39m[33m"[39m)
[32m     67[39m         [38;5;28mprint[39m([33m"[39m[33mâœ“ Correct[39m[33m"[39m [38;5;28;01mif[39;00m result == ex[[33m'[39m[33mexpected[39m[33m'[39m] [38;5;28;01melse[39;00m [33m"[39m[33mâœ— Incorrect[39m[33m"[39m)
[32m---> [39m[32m69[39m [43mdemonstrate_mathison_examples[49m[43m([49m[43m)[49m

[36mCell[39m[36m [39m[32mIn[13][39m[32m, line 51[39m, in [36mdemonstrate_mathison_examples[39m[34m()[39m
[32m     48[39m [38;5;28mprint[39m([33mf[39m[33m"[39m[33mEncoding: [39m[38;5;132;01m{[39;00mex[[33m'[39m[33mencoding[39m[33m'[39m][38;5;132;01m}[39;00m[33m (length: [39m[38;5;132;01m{[39;00m[38;5;28mlen[39m(ex[[33m'[39m[33mencoding[39m[33m'[39m])[38;5;132;01m}[39;00m[33m)[39m[33m"[39m)
[32m     50[39m [38;5;66;03m# First check if it's valid CWL[39;00m
[32m---> [39m[32m51[39m [38;5;28;01mif[39;00m [43mmathison_analyzer[49m.cwl_validator.is_valid_cwl(ex[[33m'[39m[33mencoding[39m[33m'[39m]):
[32m     52[39m     [38;5;28mprint[39m([33m"[39m[33mâœ“ Valid CWL encoding[39m[33m"[39m)
[32m     54[39m     [38;5;66;03m# Try to decode to show the transition[39;00m

[31mNameError[39m: name 'mathison_analyzer' is not defined

